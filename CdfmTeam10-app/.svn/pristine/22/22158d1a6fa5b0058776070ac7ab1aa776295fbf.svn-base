package com.gtanla.android;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.text.Html;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.analytics.tracking.android.EasyTracker;
import com.google.gson.Gson;
import com.gtanla.android.cloud.bo.Account;
import com.gtanla.android.task.CreateAccountTask;
import com.gtanla.android.task.IAsyncCallback;
import com.gtanla.android.utils.GPSTracker;
import com.gtanla.android.utils.PreferenceConstants;
import com.gtanla.android.utils.ValidationUtils;

public class ConnectActivity extends Activity {

	/**
	 * "Yes / No" accept geoloc.
	 */
	private final DialogInterface.OnClickListener acceptGeolocDialogClickListener = new DialogInterface.OnClickListener() {
		@Override
		public void onClick(final DialogInterface dialog, final int which) {
			switch (which) {
			case DialogInterface.BUTTON_POSITIVE:
				onGeolocAccepted();
				break;
			case DialogInterface.BUTTON_NEGATIVE:
				onGeolocRefused();
				break;
			default:
				break;
			}
		}
	};

	/**
	 * "Yes / No" accept geoloc.
	 */
	private final DialogInterface.OnClickListener enableGeolocDialogClickListener = new DialogInterface.OnClickListener() {
		@Override
		public void onClick(final DialogInterface dialog, final int which) {
			switch (which) {
			case DialogInterface.BUTTON_POSITIVE:
				Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
				startActivity(intent);
				mProgressDialog.dismiss();
				break;
			case DialogInterface.BUTTON_NEGATIVE:
				mProgressDialog.dismiss();
				break;
			default:
				break;
			}
		}
	};

	/**
	 * Account to create.
	 */
	private Account mAccount;

	/**
	 * App Preferences.
	 */
	private SharedPreferences mPreferences;

	/**
	 * Busy indicator.
	 */
	private ProgressDialog mProgressDialog;

	/**
	 * Call back after account creation.
	 */
	private final IAsyncCallback<Object> onAccountCreatedCallback = new IAsyncCallback<Object>() {

		/**
		 * Method call after account creation. The parameter must be the Account identifier
		 * 
		 * @param object
		 */
		@Override
		public void execute(Object object) {
			onAccountCreated(object);
		}
	};

	/**
	 * Ask for geoloc permission.
	 * */
	private void askForGeolocPermission() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(getString(R.string.lblAskForGeolocPermissionTitle));
		builder.setMessage(Html.fromHtml(getText(R.string.lblAskForGeolocPermissionMessage).toString()));
		builder.setPositiveButton(getString(R.string.lblBtnOk), this.acceptGeolocDialogClickListener);
		builder.setNegativeButton(getString(R.string.lblBtnCancel), this.acceptGeolocDialogClickListener).show();
		builder.setIcon(android.R.drawable.ic_dialog_alert);
	}

	// /**
	// * Ask for location provider enabling.
	// * */
	// private void askForGeolocServices() {
	// AlertDialog.Builder builder = new AlertDialog.Builder(this);
	// builder.setTitle(getString(R.string.lblGeolocDisabledTitle));
	// builder.setMessage(Html.fromHtml(getText(R.string.lblGeolocDisabledMessage).toString()));
	// builder.setPositiveButton(getString(R.string.lblBtnOk), this.enableGeolocDialogClickListener);
	// builder.setNegativeButton(getString(R.string.lblBtnCancel), this.enableGeolocDialogClickListener).show();
	// builder.setIcon(android.R.drawable.ic_dialog_alert);
	// }

	/**
	 * Checks whether loc services is enabled. If no => ask, if yes => carry on.
	 */
	private void checkForLocationServiceAndRequestLocation() {
		// mlocationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
		//
		// // location services disabled
		// boolean isNetworkProviderEnabled = mlocationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
		// if (!isNetworkProviderEnabled) {
		// askForGeolocServices();
		// } else {
		// requestLocation();
		// }

		// TODO améliorer en fonction des services activés ou non

		startUserCreationProcess(true);

	}

	/**
	 * Called after account creation.
	 * 
	 * @param object
	 */
	private void onAccountCreated(Object object) {
		// Check parameter
		if (object == null || Exception.class.isInstance(object)) {

			// Get default error message
			String errorMessageAccountCreationError = ConnectActivity.this.getResources()
					.getText(R.string.errorMessageAccountCreationError).toString();

			// Append specific message
			if (object != null) {
				errorMessageAccountCreationError += ((Exception) object).getMessage();
			}

			// Display error
			Toast.makeText(ConnectActivity.this, errorMessageAccountCreationError, Toast.LENGTH_LONG).show();

			// Hide waiting div
			if (ConnectActivity.this.mProgressDialog.isShowing()) {
				ConnectActivity.this.mProgressDialog.dismiss();
			}

			// End
			return;
		}

		// Store id
		SharedPreferences.Editor editor = mPreferences.edit();
		Account account = (Account) object;
		editor.putLong(PreferenceConstants.ACCOUNT_ID, account.getId());
		editor.putString(PreferenceConstants.ACCOUNT_NAME, account.getName());
		editor.putString(PreferenceConstants.ACCOUNT_FIRSTNAME, account.getFirstName());
		editor.putString(PreferenceConstants.ACCOUNT_EMAIL, account.getEmail());
		editor.commit();

		// Launch next activity
		Intent intent = new Intent(ConnectActivity.this, MainDashboardActivity.class);
		ConnectActivity.this.startActivity(intent);

		// Close activity
		ConnectActivity.this.finish();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_connect);
		mPreferences = PreferenceManager.getDefaultSharedPreferences(this);

		// Set listener for LATER button
		Button btnLater = (Button) this.findViewById(R.id.btnLater);
		btnLater.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent intent = new Intent(ConnectActivity.this, MainDashboardActivity.class);
				ConnectActivity.this.startActivity(intent);
			}
		});

		// Set listener for YES button
		Button btnYes = (Button) this.findViewById(R.id.btnYes);
		btnYes.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

				// Display waiting div
				String message = ConnectActivity.this.getResources().getText(R.string.waitMessage).toString();
				ConnectActivity.this.mProgressDialog = ProgressDialog.show(ConnectActivity.this, message, message,
						false);

				// Get inputs
				EditText edtFirstName = ((EditText) ConnectActivity.this.findViewById(R.id.edtFirstName));
				EditText edtSurName = ((EditText) ConnectActivity.this.findViewById(R.id.edtSurName));
				EditText edtEmail = ((EditText) ConnectActivity.this.findViewById(R.id.edtEmail));
				EditText edtPassword = ((EditText) ConnectActivity.this.findViewById(R.id.edtPassword));
				EditText edtPasswordConfirm = ((EditText) ConnectActivity.this.findViewById(R.id.edtPasswordConfirm));
				CheckBox chkAcceptCG = ((CheckBox) ConnectActivity.this.findViewById(R.id.chkAcceptCG));

				// Validate inputs
				String errorMessageNotEmpty = ConnectActivity.this.getResources()
						.getText(R.string.errorMessageNotEmpty).toString();
				String errorMessageNotEquals = ConnectActivity.this.getResources()
						.getText(R.string.errorMessagePasswordConfirmError).toString();
				String errorMessageEmailPattern = ConnectActivity.this.getResources()
						.getText(R.string.errorMessageEmailPattern).toString();
				String errorMessageCgNotChecked = ConnectActivity.this.getResources()
						.getText(R.string.errorMessageCgNotChecked).toString();
				boolean validity = ValidationUtils.validateEditTextNotEmpty(edtFirstName, errorMessageNotEmpty);
				validity &= ValidationUtils.validateEditTextNotEmpty(edtSurName, errorMessageNotEmpty);
				validity &= ValidationUtils.validateEditTextIsEmail(edtEmail, errorMessageEmailPattern);
				validity &= ValidationUtils.validateEditTextNotEmpty(edtPassword, errorMessageNotEmpty);
				validity &= ValidationUtils.validateEditTextNotEmpty(edtPasswordConfirm, errorMessageNotEmpty);
				validity &= ValidationUtils.validateEditTextEquals(edtPasswordConfirm,
						edtPassword.getText().toString(), errorMessageNotEquals);
				validity &= ValidationUtils.validateCheckBoxChecked(chkAcceptCG, errorMessageCgNotChecked);

				// If the form is valid
				if (validity) {

					// read values
					String edtFirstNamValue = edtFirstName.getText().toString();
					String edtSurNameValue = edtSurName.getText().toString();
					String edtEmailValue = edtEmail.getText().toString();
					String edtPasswordValue = edtPassword.getText().toString();

					// Create account instance
					mAccount = new Account(null, edtEmailValue, edtFirstNamValue, null, edtSurNameValue,
							edtPasswordValue);

					// ask for geoloc permission if not done
					boolean isGeolocAccepted = mPreferences.getBoolean(PreferenceConstants.GEOLOC_ACCEPTED, false);
					if (!isGeolocAccepted) {
						askForGeolocPermission();
					} else {
						startUserCreationProcess(true);
					}
				} else {
					// If validation errors, close progressBar
					if (ConnectActivity.this.mProgressDialog.isShowing()) {
						ConnectActivity.this.mProgressDialog.dismiss();
					}
				}
			}
		});

		// Set link and listener on CG button
		TextView txtAcceptCG = (TextView) this.findViewById(R.id.txtAcceptCG);
		txtAcceptCG.setText(Html.fromHtml(this.getText(R.string.lblAcceptCG).toString()));
		txtAcceptCG.setOnClickListener(new OnClickListener() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see android.view.View.OnClickListener#onClick(android.view.View)
			 */
			@Override
			public void onClick(View view) {
				Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(Uri.parse(ConnectActivity.this.getString(R.string.urlCg)));
				ConnectActivity.this.startActivity(intent);
			}
		});
	}

	/**
	 * Called if user accepts geoloc.
	 */
	private void onGeolocAccepted() {
		SharedPreferences.Editor editor = mPreferences.edit();
		editor.putBoolean(PreferenceConstants.GEOLOC_ACCEPTED, true);
		editor.commit();

		checkForLocationServiceAndRequestLocation();
	}

	/**
	 * Called if user refuses geoloc.
	 */
	private void onGeolocRefused() {
		SharedPreferences.Editor editor = mPreferences.edit();
		editor.putBoolean(PreferenceConstants.GEOLOC_ACCEPTED, false);
		editor.commit();

		startUserCreationProcess(false);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onStart()
	 */
	@Override
	public void onStart() {
		super.onStart();

		// Notify Google analytics tracker
		EasyTracker.getInstance(this).activityStart(this);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onStop()
	 */
	@Override
	public void onStop() {
		super.onStop();

		// Notify Google analytics tracker
		EasyTracker.getInstance(this).activityStop(this);
	}

	/**
	 * Laucnhes the user creation task.
	 */
	private void startUserCreationProcess(boolean isUserLocation) {

		// uses location
		if (isUserLocation) {
			// retrieves location if available
			GPSTracker gPSTracker = new GPSTracker(ConnectActivity.this);
			Location location = gPSTracker.getLocation();
			mAccount.setGeoCoordinates(new Gson().toJson(location));
		}

		// Call async task to create an account
		CreateAccountTask task = new CreateAccountTask(onAccountCreatedCallback, mAccount);
		task.execute();
	}
}